private void DownloadFormat()
        {
            var workbook = new HSSFWorkbook();
            var sheet = workbook.CreateSheet("MotorData");
            var hidden = workbook.CreateSheet("hidden");
            var hidden1 = workbook.CreateSheet("hidden1");
            var namedCell = workbook.CreateName();
            var namedCellNema = workbook.CreateName();
            var namedCellIec = workbook.CreateName();

            #region Styles
            HSSFColor lightBlue = CommonFunctions.setColorNPOI(workbook, HSSFColor.BLUE.index, (byte)153, (byte)204, (byte)255);
            ICellStyle rowCellStyleMainHeader = workbook.CreateCellStyle();
            rowCellStyleMainHeader.FillForegroundColor = lightBlue.GetIndex();
            rowCellStyleMainHeader.FillPattern = FillPatternType.SOLID_FOREGROUND;
            rowCellStyleMainHeader.Alignment = HorizontalAlignment.CENTER;
            rowCellStyleMainHeader.VerticalAlignment = VerticalAlignment.CENTER;
            rowCellStyleMainHeader.WrapText = true;
            rowCellStyleMainHeader.BorderBottom = NPOI.SS.UserModel.BorderStyle.THIN;
            rowCellStyleMainHeader.BorderLeft = NPOI.SS.UserModel.BorderStyle.THIN;
            rowCellStyleMainHeader.BorderRight = NPOI.SS.UserModel.BorderStyle.THIN;
            rowCellStyleMainHeader.BorderTop = NPOI.SS.UserModel.BorderStyle.THIN;
            rowCellStyleMainHeader.IsLocked = true;

            ICellStyle rowCellStyleNumeric = workbook.CreateCellStyle();
            rowCellStyleNumeric.Alignment = HorizontalAlignment.RIGHT;
            rowCellStyleNumeric.VerticalAlignment = VerticalAlignment.CENTER;
            rowCellStyleNumeric.WrapText = true;
            rowCellStyleNumeric.BorderBottom = NPOI.SS.UserModel.BorderStyle.THIN;
            rowCellStyleNumeric.BorderLeft = NPOI.SS.UserModel.BorderStyle.THIN;
            rowCellStyleNumeric.BorderRight = NPOI.SS.UserModel.BorderStyle.THIN;
            rowCellStyleNumeric.BorderTop = NPOI.SS.UserModel.BorderStyle.THIN;
            rowCellStyleNumeric.IsLocked = true;
            rowCellStyleNumeric.DataFormat = workbook.CreateDataFormat().GetFormat("#,#0.0");

            HSSFColor lightGray = CommonFunctions.setColorNPOI(workbook, HSSFColor.GREY_40_PERCENT.index, (byte)192, (byte)192, (byte)192);
            IFont font = workbook.CreateFont();
            font.Color = HSSFColor.RED.index;
            ICellStyle rowCellStyleTotal = workbook.CreateCellStyle();
            rowCellStyleTotal.FillForegroundColor = lightGray.GetIndex();
            rowCellStyleTotal.FillPattern = FillPatternType.SOLID_FOREGROUND;
            rowCellStyleTotal.Alignment = HorizontalAlignment.RIGHT;
            rowCellStyleTotal.VerticalAlignment = VerticalAlignment.CENTER;
            rowCellStyleTotal.WrapText = true;
            rowCellStyleTotal.SetFont(font);
            rowCellStyleTotal.BorderBottom = NPOI.SS.UserModel.BorderStyle.THIN;
            rowCellStyleTotal.BorderLeft = NPOI.SS.UserModel.BorderStyle.THIN;
            rowCellStyleTotal.BorderRight = NPOI.SS.UserModel.BorderStyle.THIN;
            rowCellStyleTotal.BorderTop = NPOI.SS.UserModel.BorderStyle.THIN;
            rowCellStyleTotal.IsLocked = true;
            rowCellStyleTotal.DataFormat = workbook.CreateDataFormat().GetFormat("#,#0.0");

            ICellStyle rowCellStyleRedFont = workbook.CreateCellStyle();
            rowCellStyleRedFont.Alignment = HorizontalAlignment.LEFT;
            rowCellStyleRedFont.VerticalAlignment = VerticalAlignment.CENTER;
            rowCellStyleRedFont.WrapText = false;
            rowCellStyleRedFont.SetFont(font);
            rowCellStyleRedFont.IsLocked = true;

            ICellStyle rowCellStyleData = workbook.CreateCellStyle();
            rowCellStyleData.Alignment = HorizontalAlignment.LEFT;
            rowCellStyleData.VerticalAlignment = VerticalAlignment.CENTER;
            rowCellStyleData.WrapText = false;
            rowCellStyleData.BorderBottom = NPOI.SS.UserModel.BorderStyle.THIN;
            rowCellStyleData.BorderLeft = NPOI.SS.UserModel.BorderStyle.THIN;
            rowCellStyleData.BorderRight = NPOI.SS.UserModel.BorderStyle.THIN;
            rowCellStyleData.BorderTop = NPOI.SS.UserModel.BorderStyle.THIN;
            rowCellStyleData.IsLocked = true;

            #endregion

            #region Header

            #region First Row

            var rowIndex = 0;
            var row = sheet.CreateRow(rowIndex);
            row.CreateCell(0).SetCellValue("Motor Name");
            row.CreateCell(1).SetCellValue("Serail Number");
            row.CreateCell(2).SetCellValue("Power");
            row.CreateCell(3).SetCellValue("Power Factor");
            row.CreateCell(4).SetCellValue("Power UOM");
            row.CreateCell(5).SetCellValue("Voltage");
            row.CreateCell(6).SetCellValue("Line Frequency");
            row.CreateCell(7).SetCellValue("Current");
            row.CreateCell(8).SetCellValue("Speed");
            row.CreateCell(9).SetCellValue("DS Bearing Manufacturer");
            row.CreateCell(10).SetCellValue("DS Bearing");
            row.CreateCell(11).SetCellValue("NDS Bearing Manufacturer");
            row.CreateCell(12).SetCellValue("NDS Bearing");
            row.CreateCell(13).SetCellValue("Manufacturer");
            row.CreateCell(14).SetCellValue("VFT?");
            row.CreateCell(15).SetCellValue("NEMA/IEC");
            row.CreateCell(16).SetCellValue("Frame Size");
            for (int iFirstRow = 0; iFirstRow < row.Cells.Count; iFirstRow++)
            {
                if (row.Cells[iFirstRow] != null)
                {
                    row.Cells[iFirstRow].CellStyle = rowCellStyleMainHeader;
                }
            }

            rowIndex++;

            for (int iCount = 0; iCount < 500; iCount++)
            {
                row = sheet.CreateRow(rowIndex);
                row.CreateCell(0);
                row.CreateCell(1);
                row.CreateCell(2);
                row.CreateCell(3);
                row.CreateCell(4);
                row.CreateCell(5);
                row.CreateCell(6);
                row.CreateCell(7);
                row.CreateCell(8);
                row.CreateCell(9);
                row.CreateCell(10);
                row.CreateCell(11);
                row.CreateCell(12);
                row.CreateCell(13);
                row.CreateCell(14);
                row.CreateCell(15);
                row.CreateCell(16);
                rowIndex++;
            }

            #region List


            string[] array = new string[] { "IEC", "NEMA" };
            string[] arrayNema = new string[] { "56", "143", "145", "182", "184", "213", "215", "254", "256", "284", "286", "324", "326", "364", "365", "404", "405", "440", "444", "445", "447", "449", "500", "504", "505", "580", "680" };
            string[] arrayIec = new string[] { "56", "63", "71", "80", "90", "100", "112", "132", "160", "180", "200", "225", "250", "280", "315", "355", "400", "450", "500", "560", "630" };
            #region Hidden Cell

            for (int iValueCount = 0, length = array.Length; iValueCount < length; iValueCount++)
            {
                String name = array[iValueCount];
                var rowhidden = hidden.CreateRow(iValueCount);
                var cell = rowhidden.CreateCell(0);
                cell.SetCellValue(name);
            }

            hidden.GetRow(0).CreateCell(1).SetCellValue("NEMA");
            for (int iValueCount = 0, length = arrayNema.Length; iValueCount < length; iValueCount++)
            {
                String name = arrayNema[iValueCount];
                var rownema = hidden.GetRow(iValueCount + 1);
                if (rownema != null)
                {
                    var cell = rownema.CreateCell(1);
                    cell.SetCellValue(name);
                }
                else
                {
                    var cell = hidden.CreateRow(iValueCount + 1).CreateCell(1);
                    cell.SetCellValue(name);
                }
            }


            hidden.GetRow(0).CreateCell(2).SetCellValue("IEC");

            for (int iValueCount = 0, length = arrayIec.Length; iValueCount < length; iValueCount++)
            {
                String name = arrayIec[iValueCount];
                var rowiec = hidden.GetRow(iValueCount + 1);
                if (rowiec != null)
                {
                    var cell = rowiec.CreateCell(2);
                    cell.SetCellValue(name);
                }
                else
                {
                    var cell = hidden.CreateRow(iValueCount + 1).CreateCell(2);
                    cell.SetCellValue(name);
                }

            }

            int iLength = arrayIec.Length > arrayNema.Length ? arrayIec.Length : arrayNema.Length == arrayIec.Length ? arrayNema.Length : arrayNema.Length;
            namedCell.NameName = "hidden";
            namedCell.RefersToFormula = "hidden!A1:A" + array.Length;

            namedCellNema.NameName = "hidden2";
            namedCellNema.RefersToFormula = "hidden!D2:D" + iLength;


            #endregion

            for (int i = 1; i <= 500; i++)
            {
                DVConstraint dvConstraint = DVConstraint.CreateFormulaListConstraint("hidden!$A$1:$A$" + array.Length);
                CellRangeAddressList addressList = null;
                IDataValidation dataValidation = null;
                addressList = new CellRangeAddressList(i, i, 15, 15);
                dataValidation = new HSSFDataValidation(addressList, dvConstraint);
                dataValidation.SuppressDropDownArrow = false;
                sheet.AddValidationData(dataValidation);
                workbook.SetSheetHidden(1, true);
            }




            for (int iCount = 1; iCount <= iLength; iCount++)
            {
                int iColumn = 2;
                for (int jCount = 3; jCount < 254; jCount++)
                {
                    StringBuilder strFormulae = new StringBuilder();
                    strFormulae.Append("HLOOKUP(MotorData!P");
                    strFormulae.Append(iColumn);
                    strFormulae.Append(",hidden!B$1:$C$");
                    strFormulae.Append(iLength + 1);
                    strFormulae.Append(",ROW(),0)");
                    var rowformula = hidden.GetRow(iCount);
                    if (rowformula != null)
                    {
                        rowformula.CreateCell(jCount).SetCellFormula(strFormulae.ToString());
                    }
                    else
                    {
                        hidden.CreateRow(iCount).CreateCell(jCount).SetCellFormula(strFormulae.ToString());
                    }
                    iColumn++;
                }
            }

            #endregion

            #region List


            #region Hidden Cell

            for (int iValueCount = 0, length = array.Length; iValueCount < length; iValueCount++)
            {
                String name = array[iValueCount];
                var rowhidden = hidden1.CreateRow(iValueCount);
                var cell = rowhidden.CreateCell(0);
                cell.SetCellValue(name);
            }

            hidden1.GetRow(0).CreateCell(1).SetCellValue("NEMA");
            for (int iValueCount = 0, length = arrayNema.Length; iValueCount < length; iValueCount++)
            {
                String name = arrayNema[iValueCount];
                var rownema = hidden1.GetRow(iValueCount + 1);
                if (rownema != null)
                {
                    var cell = rownema.CreateCell(1);
                    cell.SetCellValue(name);
                }
                else
                {
                    var cell = hidden1.CreateRow(iValueCount + 1).CreateCell(1);
                    cell.SetCellValue(name);
                }
            }


            hidden1.GetRow(0).CreateCell(2).SetCellValue("IEC");

            for (int iValueCount = 0, length = arrayIec.Length; iValueCount < length; iValueCount++)
            {
                String name = arrayIec[iValueCount];
                var rowiec = hidden1.GetRow(iValueCount + 1);
                if (rowiec != null)
                {
                    var cell = rowiec.CreateCell(2);
                    cell.SetCellValue(name);
                }
                else
                {
                    var cell = hidden1.CreateRow(iValueCount + 1).CreateCell(2);
                    cell.SetCellValue(name);
                }

            }

            namedCellNema.NameName = "hidden1";
            namedCellNema.RefersToFormula = "hidden1!D2:D" + iLength;


            #endregion

            for (int iCount = 1; iCount <= iLength; iCount++)
            {
                int iColumn = 251;
                for (int jCount = 3; jCount < 254; jCount++)
                {
                    StringBuilder strFormulae = new StringBuilder();
                    strFormulae.Append("HLOOKUP(MotorData!P");
                    strFormulae.Append(iColumn);
                    strFormulae.Append(",hidden!B$1:$C$");
                    strFormulae.Append(iLength + 1);
                    strFormulae.Append(",ROW(),0)");
                    var rowformula = hidden1.GetRow(iCount);
                    if (rowformula != null)
                    {
                        rowformula.CreateCell(jCount).SetCellFormula(strFormulae.ToString());
                    }
                    else
                    {
                        hidden1.CreateRow(iCount).CreateCell(jCount).SetCellFormula(strFormulae.ToString());
                    }
                    iColumn++;
                }
            }



            int columnNumber = 3;
            for (int i = 1; i < 250; i++)
            {

                string strColumn = CellReference.ConvertNumToColString(columnNumber);
                StringBuilder strConstraint = new StringBuilder();
                strConstraint.Append("hidden!$");
                strConstraint.Append(strColumn);
                strConstraint.Append("$2:$");
                strConstraint.Append(strColumn);
                strConstraint.Append("$");
                strConstraint.Append(iLength + 1);
                DVConstraint dvConstraint = DVConstraint.CreateFormulaListConstraint(strConstraint.ToString());
                CellRangeAddressList addressList = null;
                IDataValidation dataValidation = null;
                addressList = new CellRangeAddressList(i, i, 16, 16);
                dataValidation = new HSSFDataValidation(addressList, dvConstraint);
                dataValidation.SuppressDropDownArrow = false;
                sheet.AddValidationData(dataValidation);
                workbook.SetSheetHidden(2, true);
                columnNumber++;
            }
            columnNumber = 3;
            for (int i = 250; i <= 500; i++)
            {
                string strColumn = CellReference.ConvertNumToColString(columnNumber);
                StringBuilder strConstraint = new StringBuilder();
                strConstraint.Append("hidden1!$");
                strConstraint.Append(strColumn);
                strConstraint.Append("$2:$");
                strConstraint.Append(strColumn);
                strConstraint.Append("$");
                strConstraint.Append(iLength + 1);
                DVConstraint dvConstraint = DVConstraint.CreateFormulaListConstraint(strConstraint.ToString());
                CellRangeAddressList addressList = null;
                IDataValidation dataValidation = null;
                addressList = new CellRangeAddressList(i, i, 16, 16);
                dataValidation = new HSSFDataValidation(addressList, dvConstraint);
                dataValidation.SuppressDropDownArrow = false;
                sheet.AddValidationData(dataValidation);
                workbook.SetSheetHidden(2, true);
                columnNumber++;
            }

            #endregion

            #endregion

            #endregion

            #region Sheet Level Validations

            //(Optional) To hide columns
            sheet.DefaultColumnWidth = 20;

            #endregion

            #region Download

            string strFileName = "MotorUpload_Format_" + Guid.NewGuid();

            string strPath = (Server.MapPath(Request.ApplicationPath) + "\\Download\\" + "" + strFileName + ".xls");

            using (var fileData = new FileStream(strPath, FileMode.Create))
            {
                workbook.Write(fileData);
            }

            using (var exportData = new MemoryStream())
            {
                workbook.Write(exportData);
                string saveAsFileName = strFileName + ".xls";
                Response.ContentType = "application/vnd.ms-excel";
                Response.AddHeader("Content-Disposition", string.Format("attachment;filename={0}", saveAsFileName));
                Response.Clear();
                Response.BinaryWrite(exportData.GetBuffer());
                Response.End();
            }

            #endregion
        }